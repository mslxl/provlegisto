
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getProblems(params: GetProblemsParams) : Promise<GetProblemsResult> {
    return await TAURI_INVOKE("get_problems", { params });
},
async createProblem(params: CreateProblemParams) : Promise<CreateProblemResult> {
    return await TAURI_INVOKE("create_problem", { params });
},
async createSolution(problemId: string, params: CreateSolutionParams) : Promise<CreateSolutionResult> {
    return await TAURI_INVOKE("create_solution", { problemId, params });
},
async createChecker(params: CreateCheckerParams) : Promise<CreateCheckerResult> {
    return await TAURI_INVOKE("create_checker", { params });
},
async deleteProblem(problemId: string) : Promise<null> {
    return await TAURI_INVOKE("delete_problem", { problemId });
},
async deleteSolution(solutionId: string) : Promise<string> {
    return await TAURI_INVOKE("delete_solution", { solutionId });
},
async updateProblem(problemId: string, params: ProblemChangeset) : Promise<null> {
    return await TAURI_INVOKE("update_problem", { problemId, params });
},
async updateSolution(solutionId: string, params: SolutionChangeset) : Promise<null> {
    return await TAURI_INVOKE("update_solution", { solutionId, params });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Checker = { id: string; name: string; language: string; description: string | null; document_id: string; document: Document | null }
export type CreateCheckerParams = { name: string; language: string; description: string | null; content: string | null }
export type CreateCheckerResult = { checker: Checker }
export type CreateProblemParams = { name: string; url: string | null; description: string | null; statement: string | null; checker: string | null; initial_solution: CreateSolutionParams | null }
export type CreateProblemResult = { problem: Problem }
export type CreateSolutionParams = { author: string | null; name: string; language: string; content: string | null }
export type CreateSolutionResult = { solution: Solution }
export type Document = { id: string; create_datetime: string; modified_datetime: string; filename: string }
export type GetProblemsParams = { cursor: string | null; limit: number | null; search: string | null; sort_by: GetProblemsSortBy | null; sort_order: SortOrder | null }
export type GetProblemsResult = { problems: Problem[]; next_cursor: string | null; has_more: boolean }
export type GetProblemsSortBy = "Name" | "CreateDatetime" | "ModifiedDatetime"
export type Problem = { id: string; name: string; url: string | null; description: string; statement: string | null; checker: string | null; create_datetime: string; modified_datetime: string; solutions: Solution[] }
export type ProblemChangeset = { name: string | null; url: string | null; description: string | null; statement: string | null; checker: string | null }
export type Solution = { id: string; author: string; name: string; language: string; problem_id: string; document: Document | null }
export type SolutionChangeset = { name: string | null; author: string | null; language: string | null }
export type SortOrder = "Asc" | "Desc"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
